---
# Use slack messages to trigger the dump script to download a book to an s3
# bucket
#
# The slack message needs to be in the format:
#     @ce-bot rap-spike get book <book-ident-hash>
#
# The variables are in dump-book-to-s3-vars.yml
#
# fly -t <target> sp -p dump-book-to-s3 -c dump-book-to-s3.yml -l dump-book-to-s3-vars.yml

resource_types:
  - name: slack
    type: docker-image
    source:
      repository: karenc/concourse-slack-resource

resources:
  - name: rap-spike-lambda
    type: git
    source:
      uri: https://github.com/openstax/rap-spike-lambda.git

  - name: ce-bot
    type: slack
    webhook_token: check-slack-now
    source:
      user_access_token: ((slack-user-token))
      bot_access_token: ((slack-bot-token))
      bot_user_id: ((slack-bot-user-id))
      regexp: '^<@((slack-bot-user-id))>\s+rap-spike get book (.*)$'

  - name: ce-bot-message
    type: slack
    source:
      user_access_token: ((slack-user-token))
      bot_access_token: ((slack-bot-token))
      bot_user_id: ((slack-bot-user-id))

jobs:
  - name: dump book to s3
    public: true
    plan:
      - get: ce-bot
        version: every
        trigger: true

      - put: ce-bot-message
        params:
          text: "Start dumping `{{ce-bot/message_text_0}}` to s3 bucket `((s3-bucket))`"
          channel: "{{ce-bot/channel}}"

      - get: rap-spike-lambda

      - task: run dump script
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: python
              tag: 3.7-slim

          inputs:
            - name: rap-spike-lambda
            - name: ce-bot

          outputs:
            - name: dump-book

          run:
            path: /bin/bash
            args:
              - -c
              - |
                set -x && \
                apt-get update && apt-get install -y time wget jq && \
                book_ident_hash=$(wget -q -O - '((cms-api-url))' | \
                    jq -r '.items | map(select(.meta.slug == "'$(cat ce-bot/message_text_0)'")) | .[0].cnx_id') && \
                if [ "$book_ident_hash" == "null" ]; then book_ident_hash=$(cat ce-bot/message_text_0); fi && \
                cd rap-spike-lambda/dump && \
                pip install -r requirements.txt && \
                /usr/bin/time -o ../../dump-book/time-used -f '\t%E' ./dump-to-bucket.py -v \
                  -b $book_ident_hash \
                  -h ((archive-host)) \
                  --bucket ((s3-bucket)) \
                  ((s3-region)) 2> >(tee ../../dump-book/stderr) && \
                sed -i 's/:\(.*\)$/ mins \1 secs/' ../../dump-book/time-used && \
                echo -n $book_ident_hash >../../dump-book/book-ident-hash && \
                echo -n $(wget -q -O - "https://((archive-host))/contents/$book_ident_hash.json" | jq '.title') >../../dump-book/title

          params:
            AWS_ACCESS_KEY_ID: ((aws-access-key-id))
            AWS_SECRET_ACCESS_KEY: ((aws-secret-access-key))
            AWS_DEFAULT_REGION: ((aws-default-region))
            TERM: linux
            TERMINFO: /etc/terminfo

        on_success:
          put: ce-bot-message
          params:
            text: "{{dump-book/title}} (`{{dump-book/book-ident-hash}}`) uploaded to s3 bucket `((s3-bucket))` in {{dump-book/time-used}}\nSee <((cloudfront-site))/baked/{{dump-book/book-ident-hash}}.html|((cloudfront-site))/baked/{{dump-book/book-ident-hash}}.html>"
            channel: "{{ce-bot/channel}}"

        on_failure:
          put: ce-bot-message
          params:
            text: |-
              `{{ce-bot/message_text_0}}` failed to upload to s3 bucket `((s3-bucket))`:

              ```
              {{dump-book/stderr}}
              ```
            channel: "{{ce-bot/channel}}"
